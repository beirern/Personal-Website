---
import BaseHead from '../components/BaseHead.astro';
import Header from '../components/Header.astro';
import Footer from '../components/Footer.astro';
import { SITE_DESCRIPTION } from '../consts';
import { ClientRouter } from "astro:transitions";

export interface Props {
	title: string;
	description?: string;
	image?: import('astro').ImageMetadata;
}

const { title, description = SITE_DESCRIPTION, image } = Astro.props;
---

<!doctype html>
<html lang="en">
	<head>
		<BaseHead title={title} description={description} image={image} />
		<ClientRouter />
		<style>
			/* Simple initial page load animation - only for fresh page loads */
			.initial-load main {
				opacity: 0;
				transform: translateY(10px);
				transition: opacity 0.3s ease, transform 0.3s ease;
			}

			/* Show content after initial load */
			main {
				opacity: 1;
				transform: translateY(0);
			}

			/* Reduce motion for accessibility */
			@media (prefers-reduced-motion: reduce) {
				.initial-load main {
					transition: none;
					opacity: 1;
					transform: none;
				}
			}
		</style>
		<script>
			// Apply initial load class only for fresh page loads
			if (!window.navigation || window.performance.navigation.type === 0) {
				document.documentElement.className += ' initial-load';
			}
		</script>
	</head>
	<body>
		<Header />
		<main>
			<slot />
		</main>
		<Footer />
		
		<script>
			// Remove initial load class after content loads
			document.addEventListener('DOMContentLoaded', function() {
				setTimeout(() => {
					document.documentElement.classList.remove('initial-load');
				}, 50); // Small delay to ensure smooth transition
			});

			// Theme toggle functionality - global for view transitions
			function setupTheme() {
				// Get stored theme or detect system preference
				function getStoredTheme() {
					if (typeof localStorage !== 'undefined' && localStorage.getItem('theme')) {
						return localStorage.getItem('theme');
					}
					return window.matchMedia('(prefers-color-scheme: dark)').matches ? 'dark' : 'light';
				}

				// Set theme on document
				function setTheme(theme) {
					// Disable transitions during theme switch
					document.documentElement.classList.add('theme-transition-disable');

					if (theme === 'dark') {
						document.documentElement.setAttribute('data-theme', 'dark');
					} else {
						document.documentElement.removeAttribute('data-theme');
					}

					// Store theme preference
					if (typeof localStorage !== 'undefined') {
						localStorage.setItem('theme', theme);
					}

					// Re-enable transitions after a brief delay
					setTimeout(() => {
						document.documentElement.classList.remove('theme-transition-disable');
					}, 50);
				}

				// Initialize theme
				const currentTheme = getStoredTheme();
				setTheme(currentTheme);

				// Setup theme toggle button
				const themeToggle = document.getElementById('theme-toggle');
				if (themeToggle) {
					// Remove any existing listeners
					themeToggle.onclick = null;

					// Add click handler
					themeToggle.addEventListener('click', () => {
						const currentTheme = document.documentElement.getAttribute('data-theme');
						const newTheme = currentTheme === 'dark' ? 'light' : 'dark';
						setTheme(newTheme);
					});
				}

				// Listen for system theme changes
				if (typeof window !== 'undefined') {
					window.matchMedia('(prefers-color-scheme: dark)').addEventListener('change', (e) => {
						if (!localStorage.getItem('theme')) {
							setTheme(e.matches ? 'dark' : 'light');
						}
					});
				}

				// Make functions globally available
				window.setTheme = setTheme;
				window.getStoredTheme = getStoredTheme;
			}

			// Setup on initial load
			document.addEventListener('DOMContentLoaded', setupTheme);

			// Setup after view transitions
			document.addEventListener('astro:after-swap', setupTheme);
		</script>
	</body>
</html>